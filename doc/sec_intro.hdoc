// -*- mode: c++; fill-column: 80; c-basic-offset: 2; indent-tabs-mode: nil -*-
/*!\page sec_intro Introduction

The basic datatype of the library is the class Tensor, which implements the
above mentioned multi-dimensional array. This class allows accessing the
array elements one by one, extracting pieces of an array, reshaping arrays, etc
\code
  Tensor<double> a = Tensor<double>::eye(2,2);
  double one = a(0,0);
  Tensor<double> b = a(range(1,-1), range());
  Tensor<double> c = reshape(b, 1,4);
\endcode

There are many philosophical constraints behind the library implementation
itself, again motivated by the writer's need of a Matlab-like environment that
allows quick prototyping of code. Some of them are listed here
\li Automatic memory management
\li Avoiding generic programming
\li Efficiency
\li Simple syntax
\li Safety

The memory management, for instance, is done using a clever copy-on-write
pointer mechanism, which allows two arrays to share the same data until one
of them modifies the shared memory.
\code
  Tensor<double> a = Tensor<double>::eye(2,2);
  Tensor<double> b = a; // a and b share data
  a.at(0,1) = 1.0; // a now has a different data than b
\endcode
Since copying is cheap, it becomes feasible to have multiple references to the
same array in structures such as vectors, lists, etc.

Another implementation detail is that we avoid using generic programming or the
so called templates. It is true that the headers are full of template<>
statements but the implementations are typically not exposed to the users, and
rather the classes are explicitely instantiated inside the library code.

Finally some words about safety. The library is configured to have a high level
of paranoia by default, including assertions for index bounds, tensor
dimensions, etc. Minor errors are usually ignored (such as operations between
arrays which are conformant in size but not in the indices), but others will
result in expensive checks. To disable these checks, simply add NDEBUG to
the list of flags.
*/
